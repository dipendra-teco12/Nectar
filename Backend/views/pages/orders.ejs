<section class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-header">
            <h3 class="card-title">Orders Management</h3>
            <div class="card-tools">
              <!-- Status Filter -->
              <div class="d-inline-block mr-3">
                <label class="sr-only" for="statusFilter"
                  >Filter by Status</label
                >
                <select
                  class="form-control form-control-sm d-inline-block w-auto"
                  id="statusFilter"
                >
                  <option value="all">All Status</option>
                  <option value="Pending">Pending</option>
                  <option value="Processing">Processing</option>
                  <option value="Shipped">Shipped</option>
                  <option value="Delivered">Delivered</option>
                  <option value="Cancelled">Cancelled</option>
                </select>
              </div>
              <button
                type="button"
                class="btn btn-primary btn-sm"
                id="refreshTable"
              >
                <i class="fas fa-sync-alt"></i> Refresh
              </button>
            </div>
          </div>

          <div class="card-body">
            <div class="table-responsive">
              <table
                id="ordersTable"
                class="table table-bordered table-striped table-hover"
              >
                <thead class="thead-dark">
                  <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Address</th>
                    <th>Items</th>
                    <th>Total Amount</th>
                    <th>Status</th>
                    <th>Date</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- DataTables will populate this -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Order Details Modal -->
<div class="modal fade" id="orderModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderModalTitle">Order Details</h5>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body" id="orderModalBody">
        <!-- Order details will be loaded here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          Close
        </button>
        <button type="button" class="btn btn-primary" id="updateStatusBtn">
          Update Status
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Status Update Modal -->
<div class="modal fade" id="statusModal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Update Order Status</h5>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="statusForm">
          <div class="form-group">
            <label for="newStatus">Order Status</label>
            <select class="form-control" id="newStatus" required>
              <option value="">Select Status</option>
              <option value="Pending">Pending</option>
              <option value="Processing">Processing</option>
              <option value="Shipped">Shipped</option>
              <option value="Delivered">Delivered</option>
              <option value="Cancelled">Cancelled</option>
            </select>
          </div>
          <div class="form-group">
            <label for="statusNote">Notes (Optional)</label>
            <textarea
              class="form-control"
              id="statusNote"
              rows="3"
              placeholder="Add any notes about the status update..."
            ></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn btn-primary" id="confirmStatusUpdate">
          Update Status
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .order-id {
    font-family: "Courier New", monospace;
    font-size: 0.85rem;
    color: #6c757d;
  }

  .customer-info {
    line-height: 1.2;
  }

  .customer-name {
    font-weight: bold;
    color: #495057;
  }

  .customer-email {
    font-size: 0.85rem;
    color: #6c757d;
  }

  .status-badge {
    font-size: 0.75rem;
    padding: 0.35rem 0.65rem;
    border-radius: 0.375rem;
  }

  .status-pending {
    background-color: #ffc107;
    color: #212529;
  }

  .status-processing {
    background-color: #17a2b8;
    color: white;
  }

  .status-shipped {
    background-color: #007bff;
    color: white;
  }

  .status-delivered {
    background-color: #28a745;
    color: white;
  }

  .status-cancelled {
    background-color: #dc3545;
    color: white;
  }

  .amount-cell {
    font-weight: bold;
    color: #28a745;
    font-size: 1.1rem;
  }

  .items-badge {
    background-color: #e9ecef;
    color: #495057;
    border-radius: 12px;
    padding: 0.25rem 0.75rem;
    font-size: 0.8rem;
  }

  .action-buttons .btn {
    margin-right: 5px;
    margin-bottom: 5px;
  }

  .table th {
    vertical-align: middle;
    font-size: 0.9rem;
  }

  .table td {
    vertical-align: middle;
    font-size: 0.9rem;
  }

  .order-product-item {
    border-bottom: 1px solid #e9ecef;
    padding: 10px 0;
  }

  .order-product-item:last-child {
    border-bottom: none;
  }

  .product-details {
    background-color: #f8f9fa;
    border-radius: 5px;
    padding: 15px;
    margin-bottom: 10px;
  }
</style>

<script>
  $(document).ready(function () {
    // Check if DataTables is loaded
    if (typeof $.fn.DataTable === "undefined") {
      console.error("DataTables is not loaded!");
      $("#ordersTable tbody").html(
        '<tr><td colspan="8" class="text-center text-danger">DataTables library failed to load. Please refresh the page.</td></tr>'
      );
      return;
    }

    let currentOrderId = null;

    // Initialize DataTable
    const ordersTable = $("#ordersTable").DataTable({
      processing: true,
      serverSide: true,
      ajax: {
        url: "/admin/orders/list",
        type: "GET",
        data: function (d) {
          // Send parameters in the format your server expects
          const params = {
            draw: d.draw,
            start: d.start,
            length: d.length,
            search: d.search.value, // Extract the actual search string
            order_column: d.order[0]?.column || 6, // Default to date column
            order_dir: d.order[0]?.dir || "desc",
            status: $("#statusFilter").val() || "all", // Include status filter
          };

          return params;
        },
        dataSrc: function (json) {
          // Check if response has the expected structure
          if (!json.data) {
            console.error("Invalid server response - missing data array");
            return [];
          }

          return json.data;
        },
        error: function (xhr, status, error) {
          console.error("DataTable AJAX Error:", {
            status: xhr.status,
            statusText: xhr.statusText,
            responseText: xhr.responseText,
            error: error,
          });
          showToast("Error loading orders data: " + error, "error");
        },
      },
      columns: [
        {
          data: "id",
          name: "id",
          render: function (data, type, row) {
            // For sorting, return full ID
            if (type === "sort" || type === "type") {
              return data || "";
            }
            return (
              '<span class="order-id">' +
              (data ? data.substring(0, 8) + "..." : "N/A") +
              "</span>"
            );
          },
        },
        {
          data: "userName",
          name: "userName",
          render: function (data, type, row) {
            // For sorting, return just the name
            if (type === "sort" || type === "type") {
              return data || "";
            }
            return `
              <div class="customer-info">
                  <div class="customer-name">${data || "N/A"}</div>
                  <div class="customer-email">${row.email || "N/A"}</div>
              </div>
            `;
          },
        },
        {
          data: "address",
          name: "address",
          render: function (data, type, row) {
            // For sorting, return full address
            if (type === "sort" || type === "type") {
              return data || "";
            }
            const shortAddress =
              data && data.length > 30
                ? data.substring(0, 30) + "..."
                : data || "N/A";
            return `<span title="${
              data || "No address"
            }">${shortAddress}</span>`;
          },
        },
        {
          data: "quantity",
          name: "quantity",
          render: function (data, type, row) {
            // For sorting, return numeric value
            if (type === "sort" || type === "type") {
              return parseInt(data) || 0;
            }
            return `<span class="items-badge">${data || 0} item(s)</span>`;
          },
        },
        {
          data: "totalAmount",
          name: "totalAmount",
          render: function (data, type, row) {
            // For sorting, return numeric value
            if (type === "sort" || type === "type") {
              return parseFloat(data) || 0;
            }
            return (
              '<span class="amount-cell">₹' +
              parseFloat(data || 0).toFixed(2) +
              "</span>"
            );
          },
        },
        {
          data: "status",
          name: "status",
          render: function (data, type, row) {
            // For sorting, return status as-is
            if (type === "sort" || type === "type") {
              return data || "";
            }
            const statusClass = "status-" + (data || "pending").toLowerCase();
            return `<span class="badge status-badge ${statusClass}">${
              data || "Pending"
            }</span>`;
          },
        },
        {
          data: "date",
          name: "date",
          render: function (data, type, row) {
            // For sorting, return ISO date string or timestamp
            if (type === "sort" || type === "type") {
              return new Date(data).getTime() || 0;
            }

            if (!data) return "N/A";

            try {
              const date = new Date(data);
              return (
                date.toLocaleDateString() +
                "<br><small>" +
                date.toLocaleTimeString() +
                "</small>"
              );
            } catch (e) {
              return "Invalid Date";
            }
          },
        },
        {
          data: null,
          name: "actions",
          orderable: false,
          searchable: false,
          render: function (data, type, row) {
            return `
              <div class="action-buttons">
                  <button class="btn btn-info btn-sm view-order" data-id="${row.id}" title="View Details">
                      <i class="fas fa-eye"></i>
                  </button>
                  <button class="btn btn-warning btn-sm update-status" data-id="${row.id}" data-status="${row.status}" title="Update Status">
                      <i class="fas fa-edit"></i>
                  </button>
              </div>
            `;
          },
        },
      ],
      order: [[6, "desc"]], // Sort by date (newest first)
      pageLength: 10,
      lengthMenu: [
        [5, 10, 25, 50, 100],
        [5, 10, 25, 50, 100],
      ],
      responsive: true,
      language: {
        processing:
          '<div class="spinner-border text-primary" role="status"><span class="sr-only">Loading...</span></div>',
        emptyTable: "No orders found",
        zeroRecords: "No matching orders found",
        lengthMenu: "Show _MENU_ orders per page",
        info: "Showing _START_ to _END_ of _TOTAL_ orders",
        infoEmpty: "Showing 0 to 0 of 0 orders",
        infoFiltered: "(filtered from _MAX_ total orders)",
        search: "Search orders:",
        paginate: {
          first: "First",
          last: "Last",
          next: "Next",
          previous: "Previous",
        },
      },
      dom:
        "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" +
        "<'row'<'col-sm-12'tr>>" +
        "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
      drawCallback: function (settings) {
        $("[title]").tooltip();
      },
    });

    // Status filter change - reload table when status filter changes
    $("#statusFilter").on("change", function () {
      console.log("Status filter changed to:", $(this).val());
      ordersTable.ajax.reload();
    });

    // Refresh table button
    $("#refreshTable").on("click", function () {
      ordersTable.ajax.reload(null, false);
      showToast("Orders table refreshed", "success");
    });

    // View order details
    $(document).on("click", ".view-order", function () {
      const orderId = $(this).data("id");
      currentOrderId = orderId;

      $("#orderModalTitle").text("Order Details - #" + orderId.substring(0, 8));
      $("#orderModalBody").html(`
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
            <p>Loading order details...</p>
        </div>
      `);
      $("#updateStatusBtn").data("id", orderId);
      $("#orderModal").modal("show");

      // Load order details
      $.ajax({
        url: `/api/product/order/${orderId}`,
        type: "GET",
        success: function (response) {
          const order = response.data;
          displayOrderDetails(order);
        },
        error: function (xhr, status, error) {
          $("#orderModalBody").html(`
            <div class="alert alert-danger">
                <strong>Error:</strong> Could not load order details.
            </div>
          `);
        },
      });
    });

    // Display order details in modal
    function displayOrderDetails(order) {
      let productsHtml = "";

      if (order.Products && order.Products.length > 0) {
        order.Products.forEach((product) => {
          productsHtml += `
            <div class="product-details">
                <div class="row">
                    <div class="col-md-6">
                        <strong>Product ID:</strong> ${
                          product.ProductId || "N/A"
                        }<br>
                        <strong>Quantity:</strong> ${product.quantity || 0}
                    </div>
                    <div class="col-md-6">
                        <strong>Price:</strong> ₹${product.price || "0.00"}<br>
                        <strong>Total:</strong> ₹${product.total || "0.00"}
                    </div>
                </div>
            </div>
          `;
        });
      } else {
        productsHtml = "<p>No products found for this order.</p>";
      }

      const statusClass = "status-" + (order.status || "pending").toLowerCase();

      $("#orderModalBody").html(`
        <div class="row">
            <div class="col-md-6">
                <h5>Customer Information</h5>
                <p><strong>Name:</strong> ${order.userId?.fullName || "N/A"}</p>
                <p><strong>Email:</strong> ${order.userId?.email || "N/A"}</p>
                <p><strong>Address:</strong> ${order.address || "N/A"}</p>
            </div>
            <div class="col-md-6">
                <h5>Order Information</h5>
                <p><strong>Order ID:</strong> <span class="order-id">${
                  order._id || "N/A"
                }</span></p>
                <p><strong>Status:</strong> <span class="badge status-badge ${statusClass}">${order.status || "Pending"}</span></p>
                <p><strong>Date:</strong> ${
                  order.date ? new Date(order.date).toLocaleString() : "N/A"
                }</p>
                <p><strong>Total Items:</strong> ${order.totalItems || 0}</p>
            </div>
        </div>
        <hr>
        <h5>Products Ordered</h5>
        ${productsHtml}
        <div class="row mt-3">
            <div class="col-md-6 offset-md-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Order Summary</h5>
                        <p class="card-text">
                            <strong>Subtotal: ₹${
                              order.subtotal || "0.00"
                            }</strong>
                        </p>
                    </div>
                </div>
            </div>
        </div>
      `);
    }

    // Update status button click
    $("#updateStatusBtn").on("click", function () {
      const orderId = $(this).data("id");
      $("#statusModal").modal("show");
      $("#confirmStatusUpdate").data("id", orderId);
    });

    // Update status modal
    $(document).on("click", ".update-status", function () {
      const orderId = $(this).data("id");
      const currentStatus = $(this).data("status");

      $("#newStatus").val(currentStatus);
      $("#statusNote").val("");
      $("#confirmStatusUpdate").data("id", orderId);
      $("#statusModal").modal("show");
    });

    // Confirm status update
    $("#confirmStatusUpdate").on("click", function () {
      const orderId = $(this).data("id");
      const newStatus = $("#newStatus").val();
      const note = $("#statusNote").val();

      if (!newStatus) {
        showToast("Please select a status", "error");
        return;
      }

      const button = $(this);
      button
        .prop("disabled", true)
        .html(
          '<span class="spinner-border spinner-border-sm"></span> Updating...'
        );

      $.ajax({
        url: `/api/product/order/${orderId}/status`,
        type: "PATCH",
        contentType: "application/json",
        data: JSON.stringify({
          status: newStatus,
          note: note,
        }),
        success: function (response) {
          $("#statusModal").modal("hide");
          $("#orderModal").modal("hide");
          ordersTable.ajax.reload();
          showToast(
            response.message || "Order status updated successfully",
            "success"
          );
        },
        error: function (xhr, status, error) {
          console.error("Update Error:", error);
          showToast("Failed to update order status", "error");
        },
        complete: function () {
          button.prop("disabled", false).text("Update Status");
        },
      });
    });

    // Print order
    $(document).on("click", ".print-order", function () {
      const orderId = $(this).data("id");
      window.open(`/admin/orders/${orderId}/print`, "_blank");
    });

    // Toast notification function
    function showToast(message, type = "info") {
      if (typeof Swal !== "undefined") {
        const Toast = Swal.mixin({
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 3000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.addEventListener("mouseenter", Swal.stopTimer);
            toast.addEventListener("mouseleave", Swal.resumeTimer);
          },
        });

        Toast.fire({
          icon: type,
          title: message,
        });
      } else {
        alert(message);
      }
    }

    window.showToast = showToast;
    $("[title]").tooltip();

    // Status filter change
    $("#statusFilter").on("change", function () {
      ordersTable.ajax.reload();
    });

    // Refresh table button
    $("#refreshTable").on("click", function () {
      ordersTable.ajax.reload(null, false);
      showToast("Orders table refreshed", "success");
    });

    // View order details
    $(document).on("click", ".view-order", function () {
      const orderId = $(this).data("id");
      currentOrderId = orderId;

      $("#orderModalTitle").text("Order Details - #" + orderId.substring(0, 8));
      $("#orderModalBody").html(`
              <div class="text-center">
                  <div class="spinner-border" role="status">
                      <span class="sr-only">Loading...</span>
                  </div>
                  <p>Loading order details...</p>
              </div>
          `);
      $("#updateStatusBtn").data("id", orderId);
      $("#orderModal").modal("show");

      // Load order details
      $.ajax({
        url: `/api/product/order/${orderId}`,
        type: "GET",
        success: function (response) {
          const order = response.data;
          displayOrderDetails(order);
        },
        error: function (xhr, status, error) {
          $("#orderModalBody").html(`
                      <div class="alert alert-danger">
                          <strong>Error:</strong> Could not load order details.
                      </div>
                  `);
        },
      });
    });

    // Display order details in modal
    function displayOrderDetails(order) {
      let productsHtml = "";
      console.log(order);
      order.Products.forEach((product) => {
        productsHtml += `
                  <div class="product-details">
                      <div class="row">
                          <div class="col-md-6">
                              <strong>Product ID:</strong> ${product.ProductId}<br>
                              <strong>Quantity:</strong> ${product.quantity}
                          </div>
                          <div class="col-md-6">
                              <strong>Price:</strong> ₹${product.price}<br>
                              <strong>Total:</strong> ₹${product.total}
                          </div>
                      </div>
                  </div>
              `;
      });

      const statusClass = "status-" + order.status.toLowerCase();

      $("#orderModalBody").html(`
              <div class="row">
                  <div class="col-md-6">
                      <h5>Customer Information</h5>
                      <p><strong>Name:</strong> ${order.userId.fullName}</p>
                      <p><strong>Email:</strong> ${order.userId.email}</p>
                      <p><strong>Address:</strong> ${order.address}</p>
                  </div>
                  <div class="col-md-6">
                      <h5>Order Information</h5>
                      <p><strong>Order ID:</strong> <span class="order-id">${
                        order._id
                      }</span></p>
                      <p><strong>Status:</strong> <span class="badge status-badge ${statusClass}">${order.status}</span></p>
                      <p><strong>Date:</strong> ${new Date(
                        order.date
                      ).toLocaleString()}</p>
                      <p><strong>Total Items:</strong> ${order.totalItems}</p>
                  </div>
              </div>
              <hr>
              <h5>Products Ordered</h5>
              ${productsHtml}
              <div class="row mt-3">
                  <div class="col-md-6 offset-md-6">
                      <div class="card">
                          <div class="card-body">
                              <h5 class="card-title">Order Summary</h5>
                              <p class="card-text">
                                  <strong>Subtotal: ₹${order.subtotal}</strong>
                              </p>
                          </div>
                      </div>
                  </div>
              </div>
          `);
    }

    // Update status button click
    $("#updateStatusBtn").on("click", function () {
      const orderId = $(this).data("id");
      $("#statusModal").modal("show");
      $("#confirmStatusUpdate").data("id", orderId);
    });

    // Update status modal
    $(document).on("click", ".update-status", function () {
      const orderId = $(this).data("id");
      const currentStatus = $(this).data("status");

      $("#newStatus").val(currentStatus);
      $("#statusNote").val("");
      $("#confirmStatusUpdate").data("id", orderId);
      $("#statusModal").modal("show");
    });

    // Confirm status update
    $("#confirmStatusUpdate").on("click", function () {
      const orderId = $(this).data("id");
      const newStatus = $("#newStatus").val();
      const note = $("#statusNote").val();

      if (!newStatus) {
        showToast("Please select a status", "error");
        return;
      }

      const button = $(this);
      button
        .prop("disabled", true)
        .html(
          '<span class="spinner-border spinner-border-sm"></span> Updating...'
        );

      $.ajax({
        url: `/api/product/order/${orderId}/status`,
        type: "PATCH",
        contentType: "application/json",
        data: JSON.stringify({
          // Send data as a JSON string
          status: newStatus,
          note: note,
        }),
        success: function (response) {
          $("#statusModal").modal("hide");
          $("#orderModal").modal("hide");
          ordersTable.ajax.reload();
          showToast(
            response.message || "Order status updated successfully",
            "success"
          );
        },
        error: function (xhr, status, error) {
          console.error("Update Error:", error);
          showToast("Failed to update order status", "error");
        },
        complete: function () {
          button.prop("disabled", false).text("Update Status");
        },
      });
    });

    // Print order
    $(document).on("click", ".print-order", function () {
      const orderId = $(this).data("id");
      window.open(`/admin/orders/${orderId}/print`, "_blank");
    });

    // Toast notification function
    function showToast(message, type = "info") {
      if (typeof Swal !== "undefined") {
        const Toast = Swal.mixin({
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 3000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.addEventListener("mouseenter", Swal.stopTimer);
            toast.addEventListener("mouseleave", Swal.resumeTimer);
          },
        });

        Toast.fire({
          icon: type,
          title: message,
        });
      } else {
        alert(message);
      }
    }

    window.showToast = showToast;
    $("[title]").tooltip();
  });
</script>
