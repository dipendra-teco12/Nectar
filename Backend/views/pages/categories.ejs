
    <!-- Main content -->
    <section class="content">
      <div class="container-fluid">
        <!-- Categories List View -->
        <div id="categoriesView">
          <!-- Header Row -->
          <div class="row mb-3">
            <div class="col-12">
              <div
                class="d-flex justify-content-between align-items-center"
              ></div>
            </div>
          </div>

          <!-- Search Row -->
          <div class="row mb-3">
            <div class="col-md-6">
              <div class="input-group">
                <input
                  type="text"
                  class="form-control"
                  id="searchInput"
                  placeholder="Search categories..."
                />
                <div class="input-group-append">
                  <button
                    class="btn btn-outline-secondary"
                    type="button"
                    id="searchBtn"
                  >
                    <i class="fas fa-search"></i>
                  </button>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="d-flex justify-content-end align-items-center">
                <div>
                  <button
                    type="button"
                    class="btn btn-primary ml-2"
                    id="refreshCategories"
                  >
                    <i class="fas fa-sync-alt"></i> Refresh
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Loading Spinner -->
          <div class="row" id="loadingSpinner" style="display: none">
            <div class="col-12">
              <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                  <span class="sr-only">Loading...</span>
                </div>
                <p class="mt-2">Loading categories...</p>
              </div>
            </div>
          </div>

          <!-- Categories Container -->
          <div class="row" id="categoriesContainer">
            <!-- Categories will be loaded here -->
          </div>

          <!-- No Categories Found -->
          <div class="row" id="noCategoriesFound" style="display: none">
            <div class="col-12">
              <div class="card">
                <div class="card-body text-center">
                  <i class="fas fa-folder-open fa-4x text-muted mb-3"></i>
                  <h4>No Categories Found</h4>
                  <p class="text-muted">
                    There are no categories to display at the moment.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Products View -->
        <div id="productsView" style="display: none">
          <div class="row mb-3">
            <div class="col-12">
             
            </div>
          </div>

          <div class="row">
            <div class="col-12">
              <!-- Products Table Card -->
              <div class="card">
                <div class="card-header">
                  <h3 class="card-title" id="productsTableTitle">Products</h3>
                  <div class="card-tools">
                    <!-- <span class="badge badge-info" id="productCount"
                      >0 products</span -->
                    <button
                type="button"
                class="btn btn-secondary"
                id="backToCategories"
              >
                <i class="fas fa-arrow-left"></i> Back to Categories
              </button>
                  </div>
                  
                </div>
                <div class="card-body">
                  <div class="table-responsive">
                    <table
                      id="productsTable"
                      class="table table-bordered table-striped"
                    >
                      <thead>
                        <tr>
                          <th>Image</th>
                          <th>Product Name</th>
                          <th>Price</th>
                          <th>Stock</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        <!-- Data will be loaded here -->
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </div>
</div>

<!-- Product Details Modal -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="productModalTitle">Product Details</h4>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body" id="productModalBody">
        <!-- Product details will be loaded here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header bg-danger">
        <h5 class="modal-title text-white">Confirm Delete</h5>
        <button type="button" class="close text-white" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this product?</p>
        <p><strong>Name:</strong> <span id="deleteProductName"></span></p>
      
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn btn-danger" id="confirmDelete">
          Delete Product
        </button>
      </div>
    </div>
  </div>
</div>


<script>
  $(document).ready(function () {
    let allCategories = [];
    let currentCategoryId = null;
    let currentCategoryName = null;
    let productsTable = null;
    let allProducts = []; // Store all products for the current category

    // Load categories on page load
    loadCategories();

    // Refresh button
    $("#refreshCategories").on("click", function () {
      loadCategories();
      showToast("Categories refreshed", "success");
    });

    // Search functionality
    $("#searchInput").on("input", function () {
      filterCategories();
    });

    $("#searchBtn").on("click", function () {
      filterCategories();
    });

    // Back to categories
    $("#backToCategories").on("click", function () {
      showCategoriesView();
    });

    // Load categories from API
    function loadCategories() {
      $("#loadingSpinner").show();
      $("#categoriesContainer").empty();
      $("#noCategoriesFound").hide();

      $.ajax({
        url: "/api/product/category-list",
        type: "GET",
        success: function (response) {
          allCategories = response.data || [];
          displayCategories(allCategories);
        },
        error: function (xhr, status, error) {
          console.error("Error loading categories:", error);
          showToast("Error loading categories", "error");
          $("#categoriesContainer").html(`
          <div class="col-12">
            <div class="alert alert-danger">
              <i class="fas fa-exclamation-triangle"></i>
              Error loading categories. Please try again.
            </div>
          </div>
        `);
        },
        complete: function () {
          $("#loadingSpinner").hide();
        },
      });
    }

    // Display categories in card view
    function displayCategories(categories) {
      const container = $("#categoriesContainer");
      container.empty();

      if (categories.length === 0) {
        $("#noCategoriesFound").show();
        return;
      }

      $("#noCategoriesFound").hide();

      categories.forEach((category) => {
        const imageUrl = category.image || "";
        const categoryName = category.category || "Unnamed Category";
        const productCount = category.categoryProduct.length || 0;

        const cardHtml = `
        <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
          <div class="card category-card">
            <div class="card-img-top position-relative">
              ${
                imageUrl
                  ? `<img src="${imageUrl}" alt="${categoryName}" class="category-image">`
                  : `<div class="category-image-placeholder">
                      <div class="text-center">
                        <i class="fas fa-image fa-3x text-muted"></i>
                        <p class="text-muted mt-2">No Image</p>
                      </div>
                    </div>`
              }
            </div>
            <div class="card-body">
              <h5 class="card-title">${categoryName}</h5>
              <p class="text-muted small mb-3">
                <i class="fas fa-box"></i> ${productCount} Products
              </p>
              <div class="d-flex justify-content-between align-items-center">
                <small class="text-muted">
                  ${
                    category.createdAt
                      ? new Date(category.createdAt).toLocaleDateString()
                      : ""
                  }
                </small>
                <button class="btn btn-primary btn-sm view-products" 
                        data-category-id="${category._id}" 
                        data-category-name="${categoryName}">
                  <i class="fas fa-eye"></i> View Products
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
        container.append(cardHtml);
      });
    }

    // Filter categories based on search
    function filterCategories() {
      const searchTerm = $("#searchInput").val().toLowerCase().trim();

      if (searchTerm === "") {
        displayCategories(allCategories);
        return;
      }

      const filtered = allCategories.filter((category) => {
        return category.category.toLowerCase().includes(searchTerm);
      });

      displayCategories(filtered);
    }

    // View products in category
    $(document).on("click", ".view-products", function () {
      const categoryId = $(this).data("category-id");
      const categoryName = $(this).data("category-name");

      currentCategoryId = categoryId;
      currentCategoryName = categoryName;

      showProductsView(categoryName);
      loadCategoryProducts(categoryId, categoryName);
    });

    // Show categories view
    function showCategoriesView() {
      $("#categoriesView").show();
      $("#productsView").hide();

      // Destroy products table if exists
      if (productsTable) {
        productsTable.destroy();
        productsTable = null;
      }
    }

    // Show products view
    function showProductsView(categoryName) {
      $("#categoriesView").hide();
      $("#productsView").show();
      $("#productsTableTitle").text(categoryName + " Products");
    }

    // Load category products
    function loadCategoryProducts(categoryId, categoryName) {
      // First get the category to get all products
      const category = allCategories.find((cat) => cat._id === categoryId);

      if (!category || !category.categoryProduct.length) {
        $("#productCount").text("0 products");
        $("#productsTable tbody").html(`
        <tr>
          <td colspan="5" class="text-center">
            <p class="text-muted">No products found in this category.</p>
          </td>
        </tr>
      `);
        return;
      }

      // Update product count
      $("#productCount").text(category.categoryProduct.length + " products");

      // Destroy existing table if exists
      if (productsTable) {
        productsTable.destroy();
      }

      // Load products data from the category
      loadProductDetails(category.categoryProduct);
    }

    // Load detailed product information
    function loadProductDetails(productIds) {
      $.ajax({
        url: "/api/product/bulk",
        method: "POST",
        data: JSON.stringify({ productIds: productIds }),
        contentType: "application/json",
        success: function (response) {
          allProducts = response.data || [];
          displayProductsTable(allProducts);
        },
        error: function () {
          // Fallback: display basic product rows with IDs only
          const basicProducts = productIds.map((id) => ({
            _id: id,
            productName: "Loading...",
            price: 0,
            stock: 0,
            image: "",
          }));
          allProducts = basicProducts;
          displayProductsTable(basicProducts);
        },
      });
    }

    // Display products in DataTable
    function displayProductsTable(products) {
      const tbody = $("#productsTable tbody");
      tbody.empty();

      products.forEach((product) => {
        const row = `
        <tr data-product-id="${product._id}">
          <td>
            ${
              product.image
                ? `<img src="${product.image}" alt="${product.productName}" style="width: 50px; height: 50px; object-fit: cover;" class="rounded">`
                : '<div class="bg-light d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;"><i class="fas fa-image text-muted"></i></div>'
            }
          </td>
          <td>     <strong>${product.productName}</strong></td>
          <td class="price-cell">₹${(product.price || 0).toFixed(2)}</td>
          <td>
            
<span class="badge ${
  product.stock === 0
    ? "badge-danger"
    : product.stock < 10
    ? "badge-warning"
    : "badge-success"
} stock-badge">
  ${
    product.stock === 0
      ? "Out of Stock"
      : product.stock < 10
      ? "Low Stock"
      : "In Stock"
  } (${product.stock || 0})
</span>



          </td>
          <td>
            <div class="action-buttons">
              <button class="btn btn-info btn-sm view-product" data-id="${
                product._id
              }" title="View Details">
                <i class="fas fa-eye"></i>
              </button>
              <button class="btn btn-warning btn-sm edit-product" data-id="${
                product._id
              }" title="Edit Product">
                <i class="fas fa-edit"></i>
              </button>
              <button class="btn btn-danger btn-sm delete-product" 
                      data-id="${product._id}" 
                      data-name="${product.productName}" 
                      title="Delete Product">
                <i class="fas fa-trash"></i>
              </button>
            </div>
          </td>
        </tr>
      `;
        tbody.append(row);
      });

      // Initialize DataTable
      productsTable = $("#productsTable").DataTable({
        responsive: true,
        lengthChange: true,
        autoWidth: false,
        pageLength: 10,
        order: [[1, "asc"]], // Sort by name
        columnDefs: [
          { orderable: false, targets: [0, 4] }, // Disable sorting for image and actions
        ],
      });
    }

    // Product actions
    $(document).on("click", ".view-product", function () {
      const productId = $(this).data("id");
      viewProduct(productId);
    });

    $(document).on("click", ".edit-product", function () {
      const productId = $(this).data("id");
      window.location.href = `/admin/products/edit/${productId}`;
    });

    // FIXED: Delete product click handler
    $(document).on("click", ".delete-product", function () {
      const productId = $(this).data("id");
      const productName = $(this).data("name");

     

      $("#deleteProductName").text(productName || "Unknown Product");
      $("#confirmDelete").data("id", productId);
      $("#deleteModal").modal("show");
    });

    // FIXED: Confirm delete handler
    $("#confirmDelete").on("click", function () {
      const productId = $(this).data("id");
      const button = $(this);

     

      if (!productId) {
        showToast("Product ID not found", "error");
        return;
      }

      button
        .prop("disabled", true)
        .html(
          '<span class="spinner-border spinner-border-sm"></span> Deleting...'
        );

      $.ajax({
        url: `/api/product/${productId}`, // Fixed URL format
        type: "DELETE",
        success: function (response) {
          console.log("Delete success:", response);
          $("#deleteModal").modal("hide");

          // Remove the product from local array
          allProducts = allProducts.filter((p) => p._id !== productId);

          // Remove the row from table
          $(`tr[data-product-id="${productId}"]`).fadeOut(300, function () {
            $(this).remove();

            // Update product count
            $("#productCount").text(allProducts.length + " products");

            // If no products left, show empty message
            if (allProducts.length === 0) {
              $("#productsTable tbody").html(`
                    <tr>
                      <td colspan="5" class="text-center">
                        <p class="text-muted">No products found in this category.</p>
                      </td>
                    </tr>
                  `);
            }
          });

          showToast(
            response.message || "Product deleted successfully",
            "success"
          );
        },
        error: function (xhr, status, error) {
          console.error("Delete Error:", xhr.status, xhr.responseText);
          let errorMessage = "Failed to delete product";

          if (xhr.responseJSON && xhr.responseJSON.message) {
            errorMessage = xhr.responseJSON.message;
          }

          showToast(errorMessage, "error");
        },
        complete: function () {
          button.prop("disabled", false).text("Delete Product");
        },
      });
    });

    // Product view function
    function viewProduct(productId) {
      $("#productModalTitle").text("Product Details");
      $("#productModalBody").html(`
      <div class="text-center">
        <div class="spinner-border" role="status">
          <span class="sr-only">Loading...</span>
        </div>
        <p class="mt-2">Loading product details...</p>
      </div>
    `);
      $("#productModal").modal("show");

      $.ajax({
        url: `/api/product/details/${productId}`,
        method: "GET",
        success: function (response) {
          const product = response.data || response;
          $("#productModalBody").html(`
          <div class="row">
            <div class="col-md-4">
              ${
                product.image
                  ? `<img src="${product.image}" alt="${product.productName}" class="img-fluid rounded">`
                  : '<div class="bg-light p-4 text-center rounded"><i class="fas fa-image fa-3x text-muted"></i><p class="mt-2 text-muted">No Image</p></div>'
              }
            </div>
            <div class="col-md-8">
              <h5>${product.productName || "Unknown Product"}</h5>
              <p><strong>Price:</strong> ₹${(product.price || 0).toFixed(2)}</p>
              <p><strong>Stock:</strong> ${product.stock || 0}</p>
              <p><strong>Category:</strong> ${currentCategoryName}</p>
              <p><strong>Description:</strong> ${
                product.description || "No description available"
              }</p>
              ${
                product.createdAt
                  ? `<p><strong>Created:</strong> ${new Date(
                      product.createdAt
                    ).toLocaleDateString()}</p>`
                  : ""
              }
            </div>
          </div>
        `);
        },
        error: function () {
          $("#productModalBody").html(`
          <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i>
            Failed to load product details.
          </div>
        `);
        },
      });
    }

    // Toast notification function
    function showToast(message, type = "info") {
      const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
      });

      Toast.fire({
        icon: type,
        title: message,
      });
    }

    // Handle URL parameters for direct product category access
    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get("category");

    if (categoryParam) {
      setTimeout(() => {
        const decodedCategory = decodeURIComponent(categoryParam);
        const category = allCategories.find(
          (cat) => cat.category.toLowerCase() === decodedCategory.toLowerCase()
        );

        if (category) {
          currentCategoryId = category._id;
          currentCategoryName = category.category;
          showProductsView(category.category);
          loadCategoryProducts(category._id, category.category);
        }
      }, 1000);
    }
  });
</script>

<style>
  .category-card {
    transition: transform 0.2s, box-shadow 0.2s;
    height: 100%;
  }

  .category-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .category-image {
    height: 200px;
    object-fit: cover;
    width: 100%;
    border-radius: 5px 5px 0 0;
  }
#productsTable thead th {
  background-color: #212529 !important;
  color: #fff !important;
}

  .category-image-placeholder {
    height: 200px;
    background: linear-gradient(45deg, #f8f9fa, #e9ecef);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 5px 5px 0 0;
  }

  .product-image {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: 5px;
    cursor: pointer;
    transition: transform 0.2s;
  }

  .product-image:hover {
    transform: scale(1.1);
  }

  .stock-badge {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
  }

  .action-buttons .btn {
    margin-right: 5px;
    margin-bottom: 5px;
  }

  .table th {
    vertical-align: middle;
  }

  .table td {
    vertical-align: middle;
  }

  #productsTable_processing {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(255, 255, 255, 0.9);
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  .price-cell {
    font-weight: bold;
    color: #28a745;
  }

  .modal-body img {
    max-width: 100%;
    height: auto;
  }
</style>
