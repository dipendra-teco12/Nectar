<section class="content">
  <div class="container-fluid">
    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-header">
            <h3 class="card-title">All Products</h3>
            <div class="card-tools">
              <button
                type="button"
                class="btn btn-primary btn-sm"
                id="refreshTable"
              >
                <i class="fas fa-sync-alt"></i> Refresh
              </button>
              <button
                type="button"
                class="btn btn-success btn-sm ml-2"
                onclick="window.location.href='/admin/products/add'"
              >
                <i class="fas fa-plus"></i> Add Product
              </button>
            </div>
          </div>

          <div class="card-body">
            <div class="table-responsive">
              <table
                id="productsTable"
                class="table table-bordered table-striped table-hover"
              >
                <thead class="thead-dark">
                  <tr>
                    <th>Product Name</th>
                    <th>Image</th>
                    <th>Price (₹)</th>
                    <th>Stock</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- DataTables will populate this -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Product Details Modal -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="productModalTitle">Product Details</h5>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body" id="productModalBody">
        <!-- Product details will be loaded here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Image Preview Modal -->
<div class="modal fade" id="imageModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="imageModalTitle">Product Image</h5>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body text-center">
        <img id="modalImage" src="" alt="Product Image" class="img-fluid" />
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header bg-danger">
        <h5 class="modal-title text-white">Confirm Delete</h5>
        <button type="button" class="close text-white" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this product?</p>
        <p><strong>Product:</strong> <span id="deleteProductName"></span></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn btn-danger" id="confirmDelete">
          Delete Product
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .product-image {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: 5px;
    cursor: pointer;
    transition: transform 0.2s;
  }

  .product-image:hover {
    transform: scale(1.1);
  }

  .stock-badge {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
  }

  .action-buttons .btn {
    margin-right: 5px;
    margin-bottom: 5px;
  }

  .table th {
    vertical-align: middle;
  }

  .table td {
    vertical-align: middle;
  }

  #productsTable_processing {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(255, 255, 255, 0.9);
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  .price-cell {
    font-weight: bold;
    color: #28a745;
  }
</style>

<script>
  $(document).ready(function () {
    // Check if DataTables is loaded
    if (typeof $.fn.DataTable === "undefined") {
      console.error("DataTables is not loaded!");
      $("#productsTable tbody").html(
        '<tr><td colspan="5" class="text-center text-danger">DataTables library failed to load. Please refresh the page.</td></tr>'
      );
      return;
    }

    // Initialize DataTable
    const productsTable = $("#productsTable").DataTable({
      processing: true,
      serverSide: true,
      ajax: {
        url: "/admin/productlist",
        type: "GET",
        data: function (d) {
          // Send parameters in the format your server expects
          const params = {
            draw: d.draw,
            start: d.start,
            length: d.length,
            search: d.search.value, // Extract the actual search string
            order_column: d.order[0]?.column || 0,
            order_dir: d.order[0]?.dir || "asc",
          };

          return params;
        },
        dataSrc: function (json) {
          // Check if response has the expected structure
          if (!json.data) {
            console.error("Invalid server response - missing data array");
            return [];
          }

          return json.data;
        },
        error: function (xhr, status, error) {
          console.error("DataTable AJAX Error:", {
            status: xhr.status,
            statusText: xhr.statusText,
            responseText: xhr.responseText,
            error: error,
          });
          showToast("Error loading products data: " + error, "error");
        },
      },
      columns: [
        {
          data: "productName",
          name: "productName",
          render: function (data, type, row) {
            // For sorting and type detection, return raw data
            if (type === "sort" || type === "type") {
              return data || "";
            }
            return "<strong>" + (data || "N/A") + "</strong>";
          },
        },
        {
          data: "image",
          name: "image",
          orderable: false,
          searchable: false,
          render: function (data, type, row) {
            const imageUrl = data || "/images/no-image.png";
            return `<img src="${imageUrl}" alt="Product" class="product-image" data-toggle="modal" data-target="#imageModal" onclick="showImageModal('${imageUrl}', '${row.productName}')">`;
          },
        },
        {
          data: "price",
          name: "price",
          render: function (data, type, row) {
            // For sorting, return numeric value
            if (type === "sort" || type === "type") {
              return parseFloat(data) || 0;
            }
            return '<span class="price-cell">₹' + (data || "0.00") + "</span>";
          },
        },
        {
          data: "stock",
          name: "stock",
          render: function (data, type, row) {
            // For sorting, return numeric value
            if (type === "sort" || type === "type") {
              return parseInt(data) || 0;
            }

            const stockNum = parseInt(data) || 0;
            let badgeClass = "badge-success";
            let stockText = "In Stock (" + stockNum + ")";

            if (stockNum === 0) {
              badgeClass = "badge-danger";
              stockText = "Out of Stock";
            } else if (stockNum < 10) {
              badgeClass = "badge-warning";
              stockText = "Low Stock (" + stockNum + ")";
            }

            return (
              '<span class="badge stock-badge ' +
              badgeClass +
              '">' +
              stockText +
              "</span>"
            );
          },
        },
        {
          data: null,
          name: "actions",
          orderable: false,
          searchable: false,
          render: function (data, type, row) {
            return `
            <div class="action-buttons">
                <button class="btn btn-info btn-sm view-product" data-id="${row.id}" title="View Details">
                    <i class="fas fa-eye"></i>
                </button>
                <button class="btn btn-warning btn-sm edit-product" data-id="${row.id}" title="Edit Product">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-danger btn-sm delete-product" data-id="${row.id}" data-name="${row.productName}" title="Delete Product">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
          `;
          },
        },
      ],
      order: [[0, "asc"]], // Sort by product name by default
      pageLength: 10,
      lengthMenu: [
        [5, 10, 25, 50, 100],
        [5, 10, 25, 50, 100],
      ],
      responsive: true,
      language: {
        processing:
          '<div class="spinner-border text-primary" role="status"><span class="sr-only">Loading...</span></div>',
        emptyTable: "No products found",
        zeroRecords: "No matching products found",
        lengthMenu: "Show _MENU_ products per page",
        info: "Showing _START_ to _END_ of _TOTAL_ products",
        infoEmpty: "Showing 0 to 0 of 0 products",
        infoFiltered: "(filtered from _MAX_ total products)",
        search: "Search products:",
        paginate: {
          first: "First",
          last: "Last",
          next: "Next",
          previous: "Previous",
        },
      },
      dom:
        "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" +
        "<'row'<'col-sm-12'tr>>" +
        "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
      drawCallback: function (settings) {
        // Reinitialize tooltips after table redraw
        $("[title]").tooltip();
      },
    });

    // Rest of your existing code (refresh button, modals, etc.)
    $("#refreshTable").on("click", function () {
      productsTable.ajax.reload(null, false);
      showToast("Products table refreshed", "success");
    });

    // View product details
    $(document).on("click", ".view-product", function () {
      const productId = $(this).data("id");
      $("#productModalTitle").text("Product Details");
      $("#productModalBody").html(`
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
                <p>Loading product details...</p>
            </div>
        `);
      $("#productModal").modal("show");

      // Load product details via AJAX
      $.ajax({
        url: `/api/product/details/${productId}`,
        type: "GET",
        success: function (response) {
          const product = response.data;
          $("#productModalBody").html(`
                    <div class="row">
                        <div class="col-md-4">
                            <img src="${
                              product.image || "/images/no-image.png"
                            }" alt="Product" class="img-fluid rounded">
                        </div>
                        <div class="col-md-8">
                            <h5><strong>${product.productName}</strong></h5>
                            <p><strong>Price:</strong> ₹${product.price}</p>
                            <p><strong>Stock:</strong> ${
                              product.stock
                            } units</p>
                            <p><strong>Description:</strong> ${
                              product.description || "No description available"
                            }</p>
                           <p><strong>Category:</strong> ${
                             product.category || "No description available"
                           }</p>
                        </div>
                    </div>
                `);
        },
        error: function () {
          $("#productModalBody").html(`
                    <div class="alert alert-danger">
                        <strong>Error:</strong> Could not load product details.
                    </div>
                `);
        },
      });
    });

    // Edit product
    $(document).on("click", ".edit-product", function () {
      const productId = $(this).data("id");
      window.location.href = `/admin/products/edit/${productId}`;
    });

    // Delete product confirmation
    $(document).on("click", ".delete-product", function () {
      const productId = $(this).data("id");
      const productName = $(this).data("name");

      $("#deleteProductName").text(productName);
      $("#confirmDelete").data("id", productId);
      $("#deleteModal").modal("show");
    });

    // Confirm delete
    $("#confirmDelete").on("click", function () {
      const productId = $(this).data("id");
      const button = $(this);

      button
        .prop("disabled", true)
        .html(
          '<span class="spinner-border spinner-border-sm"></span> Deleting...'
        );

      $.ajax({
        url: `/api/product/${productId}`,
        type: "DELETE",
        success: function (response) {
          $("#deleteModal").modal("hide");
          productsTable.ajax.reload();
          showToast(
            response.message || "Product deleted successfully",
            "success"
          );
        },
        error: function (xhr, status, error) {
          console.error("Delete Error:", error);
          showToast("Failed to delete product", "error");
        },
        complete: function () {
          button.prop("disabled", false).text("Delete Product");
        },
      });
    });

    // Show image modal
    window.showImageModal = function (imageUrl, productName) {
      $("#imageModalTitle").text(productName);
      $("#modalImage").attr("src", imageUrl);
    };

    // Toast notification function
    function showToast(message, type = "info") {
      if (typeof Swal !== "undefined") {
        const Toast = Swal.mixin({
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 3000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.addEventListener("mouseenter", Swal.stopTimer);
            toast.addEventListener("mouseleave", Swal.resumeTimer);
          },
        });

        Toast.fire({
          icon: type,
          title: message,
        });
      } else {
        alert(message);
      }
    }

    // Make showToast globally available
    window.showToast = showToast;

    // Initialize tooltips
    $("[title]").tooltip();
  });
</script>
